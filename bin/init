# bin/init

#!/bin/sh

# 開発環境を起動するスクリプト

# スクリプトが失敗した場合には直ちに終了する。
set -e;

## ===== 実行権限の付与 =====
# このコマンドは、このスクリプトに実行権限を付与するものです。
# 実行中のスクリプトに対しては冗長な操作ですが、以下の理由からドキュメントとしての価値があるので残します:
# 1. 新しい開発者やプロジェクトに不慣れな人に、このファイルが実行可能であるべきであることを明示します。
# 2. スクリプトが新しい環境に移された時や複製された時に、正常に実行されることを保証します。
# 3. 多くの人が関わるプロジェクトや権限が頻繁に変更される環境でエラーを予防します。
# 4. UNIX系システムのファイル権限に関する基本的な操作とその重要性を教育的に示す例となります。
# 5. 本当に最初にDockerを使いビルドするときには、実行権限を付与する必要があります。その場合、chmod +x bin/init または chmod +x bin/end または chmod +x bin/clear をターミナルで実行し、実行権限を付与してください。
# 6. このファイルはシェルスクリプトです。ファイル形式がシェルスクリプトになっていない場合、実行ができないことがあります。その場合、VSコードの右下、右から４番目のところでファイル形式をシェルスクリプトに直せるので直してから使用してください。
# 7 一度ビルドしてある場合、通常の開発では、docker compose up や docker compose down をお使いください。作り直したい場合や、複数プロジェクトを掛け持ちしていて、docker-db-service等がコンフリクトを起こしてしまう場合、このシェルスクリプトは非常に有用です。

cat <<EOS
=======================================
===== 実行権限を付与します。 =====
=======================================
EOS
chmod +x bin/init
echo "成功 実行権限を付与しました！"

# ===== node_modulesの削除 =====
# 古いnode_modulesを削除して、依存関係の問題を防ぐ
cat <<EOS
=======================================
===== node_modulesを削除中 =====
=======================================
EOS
rm -rf node_modules;
echo "成功 node_modulesを削除しました！"

# ===== Dockerイメージのビルド =====
# Dockerイメージをビルドして、アプリケーションの実行環境を準備する
cat <<EOS
============================================
===== Dockerイメージをビルド中 =====
============================================
EOS
docker-compose build;
echo "成功 Dockerイメージをビルドしました！"

# ===== bundle installの実行 =====
# Rubyの依存関係をインストールする
cat <<EOS
===========================================
===== bundle installを実行中 =====
===========================================
EOS
docker-compose run --rm app bundle install;
echo "成功 bundle installを実行しました！"

# ===== Yarnキャッシュのクリア =====
# 古いYarnのキャッシュをクリアして、依存関係の問題を防ぐ
cat <<EOS
============================================
===== Yarnキャッシュをクリア中 =====
============================================
EOS
docker-compose run --rm app yarn cache clean;
echo "成功 Yarnキャッシュをクリアしました！"

# ===== yarn installの実行 =====
# JavaScriptの依存関係をインストールする
cat <<EOS
==========================================
===== yarn installを実行中 =====
=========================================
EOS
docker-compose run --rm app yarn install;
echo "成功 yarn installを実行しました！"

# ===== rails db:createの実行 =====
# データベースを作成する
cat <<EOS
===========================================
===== データベースの作成を実行中 =====
===========================================
EOS
docker-compose run --rm app rails db:create;
echo "成功 データベースを作成しました！"

# ===== rails db:migrateの実行 =====
# データベースマイグレーションを実行して、スキーマを最新の状態にする
cat <<EOS
====================================================
===== データベースマイグレーション実行中 =====
====================================================
EOS
docker-compose run --rm app rails db:migrate;
echo "成功 データベースマイグレーション実行しました！"

# ===== rails db:seedの実行 =====
# データベースに初期データを投入する
cat <<EOS
=============================================
===== データベースシードを実行中 =====
=============================================
EOS

# 重複チェックしてからシードする
# seedデータの存在チェックと投入処理
if docker-compose run --rm app rails runner "puts User.where(email: 'test_user1@gmail.com').exists?" | grep -q "true"; then
  echo "注意！ seedデータが既に存在します。seedデータの投入をスキップします。";
else
  echo "報告 seedデータが存在しません。予定通りseedデータを投入します。";
  docker-compose run --rm app rails db:seed;
fi
echo "成功 データベースシードのフェイズを完了しました！"

# ===== Railsサーバーの起動 =====
# Railsサーバーを起動して、アプリケーションにアクセス可能にする
cat <<EOS
=============================================
===== Railsサーバーを起動中... =====
=============================================
EOS

bin/dev
